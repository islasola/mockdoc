{
  "openapi": "3.0.1",
  "info": {
    "title": "Restful API",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Cloud Meta"
    },
    {
      "name": "Cluster Operations"
    },
    {
      "name": "Collection Operations"
    },
    {
      "name": "Vector Operations"
    }
  ],
  "paths": {
    "/clouds": {
      "get": {
        "summary": "List Cloud Providers",
        "x-apifox-folder": "Cloud Meta",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Lists all cloud providers available on Zilliz Cloud.",
        "tags": [
          "Cloud Meta"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a list of all available cloud providers on Zilliz Cloud.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Clouds"
                    },
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": ""
                  },
                  "2": {
                    "summary": "failure",
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767159-run"
      }
    },
    "/regions": {
      "get": {
        "summary": "List Cloud Regions",
        "x-apifox-folder": "Cloud Meta",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Lists all available cloud regions of a specific cloud provider.",
        "tags": [
          "Cloud Meta"
        ],
        "parameters": [
          {
            "name": "cloudId",
            "in": "query",
            "description": "The ID of a valid cloud provider.",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all available regions that the specified cloud provider offers.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Regions"
                    },
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767161-run"
      }
    },
    "/clusters": {
      "get": {
        "summary": "List Clusters",
        "x-apifox-folder": "Cluster Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Lists all clusters in the specified cloud region.",
        "tags": [
          "Cluster Operations"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to return on each page.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "current",
            "in": "query",
            "description": "The current page number.",
            "required": false,
            "example": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of your clusters.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Clusters"
                    },
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767163-run"
      }
    },
    "/clusters/{clusterId}": {
      "get": {
        "summary": "Describe Cluster",
        "x-apifox-folder": "Cluster Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Describe a cluster in detail.",
        "tags": [
          "Cluster Operations"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "The ID of a cluster to which this operation applies.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of clusters in detail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-resp_ListClusterResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767164-run"
      }
    },
    "/clusters/{clusterId}/resume": {
      "post": {
        "summary": "Resume Cluster",
        "x-apifox-folder": "Cluster Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Resume a suspended cluster.",
        "tags": [
          "Cluster Operations"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "The ID of a cluster to which this operation applies.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the ID of the affected cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-resp_ActionClusterResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767167-run"
      }
    },
    "/clusters/{clusterId}/suspend": {
      "post": {
        "summary": "Suspend Cluster",
        "x-apifox-folder": "Cluster Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Suspend a specified cluster. This operation will only stop the cluster and your data will remain intact.",
        "tags": [
          "Cluster Operations"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "description": "The ID of a cluster to which this operation applies.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the ID of the affected cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-resp_ActionClusterResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767168-run"
      }
    },
    "/vector/collections": {
      "get": {
        "summary": "List Collections",
        "x-apifox-folder": "Collection Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Lists collections in a cluster.",
        "tags": [
          "Collection Operations"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a list of collections in the specified cluster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-customer_ListCollectionsResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767175-run"
      }
    },
    "/vector/collections/create": {
      "post": {
        "summary": "Create Collection",
        "x-apifox-folder": "Collection Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Creates a collection in a cluster.",
        "tags": [
          "Collection Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionCreateSimple"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-customer_CreateIndexResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767176-run"
      }
    },
    "/vector/collections/describe": {
      "get": {
        "summary": "Describe Collection",
        "x-apifox-folder": "Collection Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Describes the details of a collection.",
        "tags": [
          "Collection Operations"
        ],
        "parameters": [
          {
            "name": "collectionName",
            "in": "query",
            "description": "The name of the collection to describe.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified collection in detail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-customer_DescCollectionResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767177-run"
      }
    },
    "/vector/collections/drop": {
      "post": {
        "summary": "Drop Collection",
        "x-apifox-folder": "Collection Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Drops a collection. This operation erases your collection data. Exercise caution when performing this operation.",
        "tags": [
          "Collection Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer.DropCollectionReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-customer_DropCollectionResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767178-run"
      }
    },
    "/vector/delete": {
      "post": {
        "summary": "Delete",
        "x-apifox-folder": "Vector Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Deletes one or more entities from a collection.",
        "tags": [
          "Vector Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to which this operation applies."
                      },
                      "id": {
                        "type": "string",
                        "description": "The ID of the entity to be retrieved"
                      }
                    },
                    "x-apifox-refs": {},
                    "x-apifox-orders": [
                      "collectionName",
                      "id"
                    ],
                    "required": [
                      "collectionName",
                      "id"
                    ],
                    "x-apifox-ignore-properties": []
                  },
                  {
                    "type": "object",
                    "properties": {
                      "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to which this operation applies."
                      },
                      "id": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of IDs of the entities to be retrieved"
                      }
                    },
                    "x-apifox-refs": {},
                    "x-apifox-orders": [
                      "collectionName",
                      "id"
                    ],
                    "required": [
                      "collectionName",
                      "id"
                    ],
                    "x-apifox-ignore-properties": []
                  },
                  {
                    "type": "object",
                    "properties": {
                      "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to which this operation applies."
                      },
                      "id": {
                        "type": "integer",
                        "description": "The ID of the entity to be retrieved"
                      }
                    },
                    "x-apifox-refs": {},
                    "x-apifox-orders": [
                      "collectionName",
                      "id"
                    ],
                    "required": [
                      "collectionName",
                      "id"
                    ],
                    "x-apifox-ignore-properties": []
                  },
                  {
                    "type": "object",
                    "properties": {
                      "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to which this operation applies."
                      },
                      "id": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        },
                        "description": "An array of IDs of the entities to be retrieved"
                      }
                    },
                    "x-apifox-refs": {},
                    "x-apifox-orders": [
                      "collectionName",
                      "id"
                    ],
                    "required": [
                      "collectionName",
                      "id"
                    ],
                    "x-apifox-ignore-properties": []
                  }
                ]
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-customer_DeleteResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767179-run"
      }
    },
    "/vector/insert": {
      "post": {
        "summary": "Insert",
        "x-apifox-folder": "Vector Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Inserts one or more entities into a collection.",
        "tags": [
          "Vector Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "x-apifox-orders": [
                      "collectionName",
                      "data"
                    ],
                    "properties": {
                      "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to which entities will be inserted."
                      },
                      "data": {
                        "type": "object",
                        "properties": {},
                        "x-apifox-orders": [],
                        "description": "An entity object. Note that the keys in the entity should match the collection schema.",
                        "x-apifox-ignore-properties": []
                      }
                    },
                    "required": [
                      "collectionName",
                      "data"
                    ],
                    "x-apifox-ignore-properties": []
                  },
                  {
                    "$ref": "#/components/schemas/customer.InsertReq"
                  }
                ]
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the number of inserted entities and an array of their IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/httpapi.GenericResp-customer_InsertResp"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767180-run"
      }
    },
    "/vector/search": {
      "post": {
        "summary": "Search",
        "x-apifox-folder": "Vector Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Conducts a similarity search in a collection. ",
        "tags": [
          "Vector Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-apifox-refs": {
                  "01H1PFY2ZE8WYR08AGKW1MBY8M": {
                    "$ref": "#/components/schemas/customer.SearchOrQueryReq",
                    "x-apifox-overrides": {
                      "level": {
                        "type": "integer",
                        "description": "The precision level of the results can be adjusted using values **1**, **2**, or **3**. Higher precision levels lead to more accurate results but take longer to compute. The default value is 1, which prioritizes speed over accuracy.",
                        "default": 1
                      }
                    }
                  }
                },
                "x-apifox-orders": [
                  "01H1PFY2ZE8WYR08AGKW1MBY8M"
                ],
                "properties": {
                  "collectionName": {
                    "type": "string",
                    "description": "The name of the collection to which this operation applies."
                  },
                  "filter": {
                    "type": "string",
                    "description": "The filter used to find matches for the search"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "The maximum number of entities to return.<br>The sum of this value of that of `offset` should be less than **1024**.",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 100
                  },
                  "offset": {
                    "type": "integer",
                    "description": "The number of entities to skip in the search results.<br>The sum of this value and that of `limit` should not be greater than **1024**.",
                    "minimum": 0,
                    "maximum": 1024,
                    "exclusiveMinimum": true
                  },
                  "outputFields": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "default": "id, distance"
                    },
                    "description": "An array of fields to return along with the search results."
                  },
                  "vector": {
                    "type": "string",
                    "description": "The label of this field should be the name of the indexed vector field in the collection. For example, if the name of the indexed vector field is **title_vector**, the label of this field should be **title_vector**."
                  }
                },
                "required": [
                  "collectionName",
                  "vector"
                ],
                "x-apifox-ignore-properties": [
                  "collectionName",
                  "filter",
                  "limit",
                  "offset",
                  "outputFields",
                  "vector"
                ]
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the search results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "x-apifox-orders": [],
                        "x-apifox-ignore-properties": []
                      }
                    }
                  },
                  "x-apifox-refs": {},
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-77767181-run"
      }
    },
    "/vector/query": {
      "post": {
        "summary": "Query",
        "x-apifox-folder": "Vector Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Conducts a vector query in a collection.",
        "tags": [
          "Vector Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collectionName": {
                    "type": "string",
                    "description": "The name of the collection to which this operation applies."
                  },
                  "filter": {
                    "type": "string",
                    "description": "The filter used to find matches for the search."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "The maximum number of entities to return.<br>The sum of this value and that of `offset` should be less than **16384**.",
                    "default": 100,
                    "minimum": 1,
                    "maximum": 3000
                  },
                  "offset": {
                    "type": "integer",
                    "description": "The number of entities to skip in the search results.<br>The sum of this value and that of `limit` should be less than **16384**.",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 16384
                  },
                  "outputFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of fields to return along with the search results."
                  }
                },
                "x-apifox-refs": {
                  "01H0KV6DX6NKH0PHSNRYW8XD4S": {
                    "$ref": "#/components/schemas/customer.QueryReq"
                  }
                },
                "x-apifox-orders": [
                  "01H0KV6DX6NKH0PHSNRYW8XD4S"
                ],
                "required": [
                  "collectionName",
                  "filter"
                ],
                "x-apifox-ignore-properties": [
                  "collectionName",
                  "filter",
                  "limit",
                  "offset",
                  "outputFields"
                ]
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the search results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "x-apifox-orders": [],
                        "x-apifox-ignore-properties": []
                      }
                    }
                  },
                  "x-apifox-refs": {},
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-82167294-run"
      }
    },
    "/vector/get": {
      "post": {
        "summary": "Get",
        "x-apifox-folder": "Vector Operations",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Conducts a similarity search in a collection.",
        "tags": [
          "Vector Operations"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/customer.GetReq1"
                  },
                  {
                    "$ref": "#/components/schemas/customer.GetReq2"
                  },
                  {
                    "type": "object",
                    "x-apifox-refs": {
                      "01H0KWBZQSHZ451Z4A9YQ9WQTA": {
                        "$ref": "#/components/schemas/customer.GetReq3",
                        "x-apifox-overrides": {
                          "id": {
                            "type": "integer",
                            "description": "The ID of entity to be retrieved"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      }
                    },
                    "x-apifox-orders": [
                      "01H0KWBZQSHZ451Z4A9YQ9WQTA"
                    ],
                    "properties": {
                      "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to which this operation applies."
                      },
                      "outputFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "An array of fields to return along with the search results."
                      },
                      "id": {
                        "type": "integer",
                        "description": "The ID of entity to be retrieved"
                      }
                    },
                    "required": [
                      "collectionName",
                      "id"
                    ],
                    "x-apifox-ignore-properties": [
                      "collectionName",
                      "outputFields",
                      "id"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/customer.GetReq4"
                  }
                ]
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the search results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "x-apifox-orders": [],
                        "x-apifox-ignore-properties": []
                      }
                    }
                  },
                  "x-apifox-refs": {},
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://www.apifox.cn/web/project/2645146/apis/api-82172081-run"
      }
    }
  },
  "components": {
    "schemas": {
      "customer.GetReq4": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which this operation applies."
          },
          "outputFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of fields to return along with the search results."
          },
          "id": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of IDs of the entities to be retrieved"
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "outputFields",
          "id"
        ],
        "required": [
          "collectionName",
          "id"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.GetReq3": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which this operation applies."
          },
          "outputFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of fields to return along with the search results."
          },
          "id": {
            "type": "integer",
            "description": "The ID of the entity to be retrieved"
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "outputFields",
          "id"
        ],
        "required": [
          "collectionName",
          "id"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.GetReq2": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which this operation applies."
          },
          "outputFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of fields to return along with the search results."
          },
          "id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of IDs of the entities to be retrieved"
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "outputFields",
          "id"
        ],
        "required": [
          "collectionName",
          "id"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.GetReq1": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which this operation applies."
          },
          "outputFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of fields to return along with the search results."
          },
          "id": {
            "type": "string",
            "description": "The ID of the entity to be retrieved"
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "outputFields",
          "id"
        ],
        "required": [
          "collectionName",
          "id"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.QueryReq": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which this operation applies."
          },
          "filter": {
            "type": "string",
            "description": "The filter used to find matches for the search."
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of entities to return.<br>The sum of this value and that of `offset` should be less than **16384**.",
            "default": 100,
            "minimum": 1,
            "maximum": 3000
          },
          "offset": {
            "type": "integer",
            "description": "The number of entities to skip in the search results.<br>The sum of this value and that of `limit` should be less than **16384**.",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 16384
          },
          "outputFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of fields to return along with the search results."
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "filter",
          "limit",
          "offset",
          "outputFields"
        ],
        "required": [
          "collectionName",
          "filter"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.SearchOrQueryReq": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which this operation applies."
          },
          "filter": {
            "type": "string",
            "description": "The filter used to find matches for the search"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of entities to return.<br>The sum of this value of that of `offset` should be less than **1024**.",
            "default": 100,
            "minimum": 1,
            "maximum": 100
          },
          "offset": {
            "type": "integer",
            "description": "The number of entities to skip in the search results.<br>The sum of this value and that of `limit` should not be greater than **1024**.",
            "minimum": 0,
            "maximum": 1024,
            "exclusiveMinimum": true
          },
          "outputFields": {
            "type": "array",
            "items": {
              "type": "string",
              "default": "id, distance"
            },
            "description": "An array of fields to return along with the search results."
          },
          "vector": {
            "type": "string",
            "description": "The label of this field should be the name of the indexed vector field in the collection. For example, if the name of the indexed vector field is **title_vector**, the label of this field should be **title_vector**."
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "filter",
          "limit",
          "offset",
          "outputFields",
          "vector"
        ],
        "required": [
          "collectionName",
          "vector"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-customer_InsertResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/customer.InsertResp"
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.InsertResp": {
        "type": "object",
        "properties": {
          "insertCount": {
            "type": "integer",
            "examples": [
              4
            ],
            "description": "The number of inserted entities."
          },
          "insertIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "['id1'",
                " 'id2'",
                " 'id3']"
              ]
            ],
            "description": "An array of the IDs of inserted entities."
          }
        },
        "x-apifox-orders": [
          "insertCount",
          "insertIds"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.InsertReq": {
        "type": "object",
        "required": [
          "data",
          "collectionName"
        ],
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to which entities will be inserted."
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "x-apifox-orders": [],
              "properties": {},
              "x-apifox-ignore-properties": []
            },
            "description": "An array of entity objects. Note that the keys in an entity object should match the collection schema"
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-customer_DeleteResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/customer.DeleteResp"
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.DeleteResp": {
        "type": "object",
        "x-apifox-orders": [],
        "properties": {},
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-customer_DropCollectionResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/customer.DropCollectionResp"
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.DropCollectionResp": {
        "type": "object",
        "x-apifox-orders": [],
        "properties": {},
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.DropCollectionReq": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to delete."
          }
        },
        "x-apifox-orders": [
          "collectionName"
        ],
        "required": [
          "collectionName"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-customer_DescCollectionResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/customer.DescCollectionResp"
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.DescCollectionResp": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection."
          },
          "description": {
            "type": "string",
            "description": "An optional description of the collection."
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customer.DescField"
            },
            "description": "An field array"
          },
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customer.DescIndex"
            },
            "description": "An index array"
          },
          "load": {
            "type": "string",
            "description": "The load status of the collection. Possible values are **unload**, **loading**, and **loaded**."
          },
          "shardsNum": {
            "type": "integer",
            "description": "The number of shards in the collection."
          },
          "enableDynamic": {
            "type": "boolean",
            "description": "Whether the dynamic JSON feature is enabled for this collection."
          }
        },
        "x-apifox-orders": [
          "collectionName",
          "description",
          "fields",
          "indexes",
          "load",
          "shardsNum",
          "enableDynamic"
        ],
        "required": [
          "enableDynamic"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.DescIndex": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "The name of the indexed field."
          },
          "indexName": {
            "type": "string",
            "description": "The name of the generated index files."
          },
          "metricType": {
            "type": "string",
            "description": "The metric type used in the index process."
          }
        },
        "x-apifox-orders": [
          "fieldName",
          "indexName",
          "metricType"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.DescField": {
        "type": "object",
        "properties": {
          "autoId": {
            "type": "boolean",
            "description": "Whether the primary key automatically increments."
          },
          "description": {
            "type": "string",
            "description": "An optional description of the field."
          },
          "name": {
            "type": "string",
            "description": "The name of the field."
          },
          "primaryKey": {
            "type": "boolean",
            "description": "Whether the field is a primary field."
          },
          "type": {
            "type": "string",
            "description": "The data type of the values in this field."
          }
        },
        "x-apifox-orders": [
          "autoId",
          "description",
          "name",
          "primaryKey",
          "type"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-customer_CreateIndexResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/customer.CreateIndexResp"
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "customer.CreateIndexResp": {
        "type": "object",
        "x-apifox-orders": [],
        "properties": {},
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "CollectionCreateSimple": {
        "type": "object",
        "properties": {
          "collectionName": {
            "type": "string",
            "description": "The name of the collection to create."
          },
          "dimension": {
            "type": "integer",
            "description": "The number of dimensions for the vector field of the collection.",
            "minimum": 32,
            "maximum": 32768
          },
          "metricType": {
            "type": "string",
            "description": "The distance metric used for the collection.",
            "default": "L2"
          },
          "primaryField": {
            "type": "string",
            "description": "The primary key field.",
            "default": "id"
          },
          "vectorField": {
            "type": "string",
            "description": "The vector field.",
            "default": "vector"
          },
          "description": {
            "type": "string",
            "description": "The description of the collection"
          }
        },
        "required": [
          "collectionName",
          "dimension"
        ],
        "x-apifox-orders": [
          "collectionName",
          "dimension",
          "metricType",
          "primaryField",
          "vectorField",
          "description"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-customer_ListCollectionsResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-resp_ActionClusterResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "$ref": "#/components/schemas/resp.ActionClusterResp"
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "resp.ActionClusterResp": {
        "type": "object",
        "properties": {
          "clusterId": {
            "type": "string",
            "description": "The ID of a cluster."
          },
          "prompt": {
            "type": "string",
            "description": "The statement indicating that the current operation succeeds."
          }
        },
        "x-apifox-orders": [
          "clusterId",
          "prompt"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "httpapi.GenericResp-resp_ListClusterResp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "type": "object",
            "x-apifox-refs": {
              "01H1RF3YYDEJQV8V95B61TT8V7": {
                "$ref": "#/components/schemas/resp.ClusterDTO",
                "x-apifox-overrides": {}
              }
            },
            "properties": {
              "clusterId": {
                "type": "string",
                "description": "The ID of the cluster."
              },
              "clusterName": {
                "type": "string",
                "description": "The Name of the cluster."
              },
              "description": {
                "type": "string",
                "description": "An optional description of the cluster."
              },
              "regionId": {
                "type": "string",
                "description": "The ID of the cloud region where the cluster exists."
              },
              "clusterType": {
                "type": "string",
                "description": "The type of the CU associated with the cluster."
              },
              "cuSize": {
                "type": "integer",
                "description": "The size of the CU used by the cluster."
              },
              "status": {
                "type": "string",
                "description": "The current status of the cluster. Possible values are **CREATING**, **RUNNING**, **SUSPENDING**, and **RESUMING**."
              },
              "connectAddress": {
                "type": "string",
                "description": "The public endpoint of the cluster. You can use this to connect to your cluster from public networks."
              },
              "privateLinkAddress": {
                "type": "string",
                "description": "The private endpoint of the cluster. You can use this to connect to your cluster from your VPSs in the same cloud region."
              },
              "createTime": {
                "type": "string",
                "description": "The time when this cluster has been creaated."
              },
              "storageSize": {
                "type": "integer",
                "description": "The storage size of the cluster.",
                "format": "sint64"
              },
              "snapshotNumber": {
                "type": "integer",
                "description": "The number of snapshofts created from the cluster."
              },
              "createProgress": {
                "type": "integer",
                "description": "The creation progress of the cluster."
              }
            },
            "required": [
              "storageSize",
              "snapshotNumber",
              "createProgress",
              "regionId",
              "cuSize"
            ],
            "x-apifox-orders": [
              "01H1RF3YYDEJQV8V95B61TT8V7",
              "storageSize",
              "snapshotNumber",
              "createProgress"
            ],
            "x-apifox-ignore-properties": [
              "clusterId",
              "clusterName",
              "description",
              "regionId",
              "clusterType",
              "cuSize",
              "status",
              "connectAddress",
              "privateLinkAddress",
              "createTime"
            ]
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "resp.ClusterDTO": {
        "type": "object",
        "properties": {
          "clusterId": {
            "type": "string",
            "description": "The ID of the cluster."
          },
          "clusterName": {
            "type": "string",
            "description": "The Name of the cluster."
          },
          "description": {
            "type": "string",
            "description": "An optional description of the cluster."
          },
          "regionId": {
            "type": "string",
            "description": "The ID of the cloud region where the cluster exists."
          },
          "clusterType": {
            "type": "string",
            "description": "The type of the CU associated with the cluster."
          },
          "cuSize": {
            "type": "integer",
            "description": "The size of the CU used by the cluster."
          },
          "status": {
            "type": "string",
            "description": "The current status of the cluster. Possible values are **CREATING**, **RUNNING**, **SUSPENDING**, and **RESUMING**."
          },
          "connectAddress": {
            "type": "string",
            "description": "The public endpoint of the cluster. You can use this to connect to your cluster from public networks."
          },
          "privateLinkAddress": {
            "type": "string",
            "description": "The private endpoint of the cluster. You can use this to connect to your cluster from your VPSs in the same cloud region."
          },
          "createTime": {
            "type": "string",
            "description": "The time when this cluster has been creaated."
          }
        },
        "x-apifox-orders": [
          "clusterId",
          "clusterName",
          "description",
          "regionId",
          "clusterType",
          "cuSize",
          "status",
          "connectAddress",
          "privateLinkAddress",
          "createTime"
        ],
        "required": [
          "regionId",
          "cuSize"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "Clusters": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "description": "The total number of clusters returned."
              },
              "currentPage": {
                "type": "integer",
                "description": "The current page in the results."
              },
              "pageSize": {
                "type": "integer",
                "description": "The number of clusters per page in the results."
              },
              "clusters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "clusterId": {
                      "type": "string",
                      "description": "The ID of the cluster."
                    },
                    "clusterName": {
                      "type": "string",
                      "description": "The name of the cluster."
                    },
                    "description": {
                      "type": "string",
                      "description": "An optional description about the cluster."
                    },
                    "regionId": {
                      "type": "string",
                      "description": "The ID of the region where the cluster exists."
                    },
                    "clusterType": {
                      "type": "string",
                      "description": "The type of CU associated with the cluster. Possible values are **Performance-optimized** and **Capacity-optimized**."
                    },
                    "cuSize": {
                      "type": "integer",
                      "description": "The size of the CU associated with the cluster."
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the cluster. Possible values are **INITIALIZING**, **RUNNING**, **SUSPENDING**, and **RESUMING**."
                    },
                    "connectAddress": {
                      "type": "string",
                      "description": "The public endpoint of the cluster. You can connect to the cluster using this endpoint from the public network."
                    },
                    "privateLinkAddress": {
                      "type": "string",
                      "description": "The private endpoint of the cluster. You can set up a private link to allow your VPS in the same cloud region to access your cluster."
                    },
                    "createTime": {
                      "type": "string",
                      "description": "The time at which the cluster has been created."
                    }
                  },
                  "x-apifox-orders": [
                    "clusterId",
                    "clusterName",
                    "description",
                    "regionId",
                    "clusterType",
                    "cuSize",
                    "status",
                    "connectAddress",
                    "privateLinkAddress",
                    "createTime"
                  ],
                  "required": [
                    "regionId"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "description": "An array of clusters in detail."
              }
            },
            "x-apifox-orders": [
              "count",
              "currentPage",
              "pageSize",
              "clusters"
            ],
            "x-apifox-ignore-properties": []
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "req.PageListReq": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          }
        },
        "x-apifox-orders": [
          "currentPage",
          "pageSize"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "Regions": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cloudId": {
                  "type": "string",
                  "description": "The ID of a cloud provider"
                },
                "regionId": {
                  "type": "string",
                  "description": "The ID of a cloud region"
                },
                "apiBaseUrl": {
                  "type": "string",
                  "description": "The base URL of an Zilliz Cloud open API endpiont"
                }
              },
              "x-apifox-orders": [
                "cloudId",
                "regionId",
                "apiBaseUrl"
              ],
              "x-apifox-ignore-properties": []
            }
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "x-apifox-orders": [
          "code",
          "message"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      },
      "Clouds": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cloudId": {
                  "type": "string",
                  "description": "The ID of a cloud provider."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the cloud provider."
                }
              },
              "x-apifox-orders": [
                "cloudId",
                "description"
              ],
              "x-apifox-ignore-properties": []
            }
          }
        },
        "x-apifox-orders": [
          "code",
          "data"
        ],
        "x-apifox-ignore-properties": [],
        "x-apifox-folder": "Schemas"
      }
    }
  },
  "servers": []
}